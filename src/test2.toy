
//= a 123
//= b 123.45
//= c a
//= cc c
//= ccc cc
//= d "a string"
= e + 1 2
//= f - 1.1 2.1
//= g * 1 2
//= h / 1 2
//= i % 1 2
//= test g

// single line functions

// no args, returns i64.
// This is just a constant, so could be simplified to..
// = j1 123
//= j1 \ i64 => 123

// uncomment to test immutable constants, same name as above
//= j1 \ i64 => 123

// one i64 arg, returns i64
//= k1 \ i64 i64 arg1 => + 123 arg1

// two i64 args, returns i64
//= l1 \ i64 i64 i64 arg1 arg2 => + arg1 arg2

// one arg is a function that takes i64 returns i64, arg2 is an i64, both passed to this function which returns i64
//= m1 \ (i64 i64) i64 i64 arg1 arg2 => arg1 arg2

// multi-line functions

// two i64 args, returns i64
= k2 \ i64 i64 i64 arg1 arg2 =>
= x + arg1 123
= y - x arg2
= z * y 10

// z is the first expression
// (not an assignment) so it is
// the return value of the function
z

// one arg is a function that takes i64 returns i64, arg2 is an i64, both passed to this function which returns i64
//= m2 \ (i64 i64) i64 i64 arg1 arg2 =>
//arg1 arg2

// Output - Print

//@ "Hello, world!"
//@ 123
//@ 123.12
//@ + 1 2

// = list [ 1 2 3 ]
// = multiply_by_100 \ i64 i64 num => * 100 num
//using function reference
// = list2 List.map (multiply_by_100) list
//or inline function?
// = list2 List.map (\ i64 i64 num => * 100 num) list
//or closure?
// = list2 List.map (|num| * 100 num) list

// let list: Vec<i64> = vec![1,2,3];
// function multiply_by_100(num: i64) -> i64 {
// 100 * num 
// }
// let list2: Vec<i64> = list.iter().map(multiply_by_100).collect();

// List.append
// let c: Vec<i32> = a.iter().cloned().chain(b.iter().cloned()).collect(); // Cloned


= a \ "i64 i64" i64 i64 arg1 arg2 => arg1 arg2
= b \ i64 i64 arg1 => + 123 arg1
= c a 'b 456

//or

= a \ (i64 i64) i64 i64 arg1 arg2 => arg1 arg2
= b \ i64 i64 arg1 => + 123 arg1
= c a (b) 456

// Should we even be doing loops in a functional language
// Likely not

// Loops - Loop

  // loop { }
  //..
  //= a + a b
  // continue
  //..>
  // break
  //..*
  //.

// Loops - While

  // while bool {}
  //..? bool
  //= a + a b
  //.
  
// Loops - For-in

  // for b in 0..100 (forward loop)
  //.. b 0 100
  //= a + a b
  //.

  // for b in (0..100).rev() (reverse loop)
  //..- b 100 0
  //= a - a b
  //.

// Loops - For-of

  //= c 0
  //= b [ 0 1 2 3 ]
  // should get len of b automatically (forward loop)
  //..= d i b
  //= c + c d
  //i
  //.

  //= c 0
  //= b [ 0 1 2 3 ]
  // should get len of b automatically (reverse loop)
  //..=- d i b
  //= c + c d
  //i
  //.