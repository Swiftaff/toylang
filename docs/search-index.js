var searchIndex = JSON.parse('{\
"toylang":{"doc":"Toylang","t":[3,3,3,3,3,6,6,6,6,6,0,12,11,11,11,11,11,11,11,11,11,11,11,11,0,12,12,12,12,12,11,12,0,11,12,0,0,12,12,11,11,11,11,11,0,11,11,11,11,11,0,11,11,11,11,11,5,12,12,11,12,11,11,5,12,12,0,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,5,11,0,12,11,11,5,5,5,5,5,5,11,11,0,12,0,12,11,11,11,11,13,6,6,13,13,13,13,13,6,6,6,4,6,3,13,13,6,6,13,13,13,13,13,13,13,13,13,13,13,6,13,13,6,6,13,6,13,13,6,13,13,6,5,5,5,5,5,0,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,11,11,5,5,11,11,11,11,11,11,11,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,17,3,3,11,11,11,11,11,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,12,11,11,12,12,5,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,12,12,12,12,12,12,12,12,12,12,5,11,12,12,11,12,11,12,11,11,12,12,0,12,12,12,12,11,11,11,11,11,11,12,3,11,11,12,11,11,11,11,12,11,11,11,11,17,3,5,12,12,12,12,12,12,12,11,11,11,11,12,12,12,12,12,12,12,12,12,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,12,12,12,11,12,12,12,11,12,12,12,12,12,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,11,3,3,6,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,0,14,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],"n":["Compiler","DebugErrorStack","DebugLinesOfChars","DebugLinesOfTokens","DebugLogs","ErrorStack","LinesOfChars","LinesOfTokens","Logs","Tokens","ast","ast","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","compiler_runner","current_line","current_line_token","debug","debug_compiler_history","debug_line","debug_step","debug_step","debug_window_derive","default","error_stack","errors","file","file","filepath","fmt","fmt","fmt","fmt","fmt","formatting","from","from","from","from","from","integration_tests","into","into","into","into","into","left_pad","lines_of_chars","lines_of_tokens","log","logs","main_loop_over_lines_of_tokens","new","num_digits","output","outputdir","parse","parse_one_line","rem_first_and_last","run","run_main_loop","run_main_tasks","set_lines_of_chars","set_lines_of_tokens","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","Ast","borrow","borrow_mut","clone","clone_into","debug_flat_usize_array","default","elements","elements","fmt","from","get_boolean_fns","get_booleans","get_elements","get_initial_arithmetic_operators","get_initial_types","get_list_functions","into","new","output","output","parents","parents","to_owned","try_from","try_into","type_id","Arg","ArgNames","ArgTypes","Assignment","Bool","CommentSingleLine","Constant","ConstantRef","ElIndex","Element","ElementChildren","ElementInfo","Elements","ElementsVec","Eol","Float","Format","From","FunctionCall","FunctionDef","FunctionDefWIP","If","InbuiltFunctionCall","InbuiltFunctionDef","Indent","Int","List","LoopForRange","LoopForRangeWIP","Name","Parens","Println","RefName","ReturnType","Root","Scope","Seol","String","To","Type","Unused","Value","_cut_and_paste_element_infos","_cut_and_paste_elements","_get_inbuilt_function_by_name_and_returntype","_get_inbuilt_function_index_by_name_and_returntype","_is_existing_constant","append","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","fmt","fmt","from","from","get_arg_index_by_name","get_argnames_from_argtokens","get_argtypes_from_argtokens","get_constant_by_name","get_constant_index_by_name","get_element_by_name","get_elementinfo_type","get_formatted_dyn_fn_type_sig","get_function_index_by_name","get_inbuilt_function_by_name","get_inbuilt_function_index_by_name","get_inbuilt_type_index_by_name","get_infered_type_of_any_element","get_infered_type_of_arg_element","get_infered_type_of_constant_element","get_infered_type_of_constantref_element","get_infered_type_of_functioncall_element","get_infered_type_of_if_element","get_infered_type_of_inbuiltfunctioncall_element","get_last_element","get_returntype_from_argtokens","get_updated_elementinfo_with_infered_type","into","into","replace_element_child","replace_funcdefwip_with_funcdef","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","write_indent","write_subtree","_append_as_ref","append","assignment","comment_single_line","constant_ref","float","function_call","function_call1","function_definition_start","function_ref_or_call","functiontypesig_or_functionreference_end","functiontypesig_or_functionreference_start","if_expression","inbuilt_function_call","indent_if_first_in_line","int","is_return_expression","list_start","loop_for_range_start","new_constant_or_arg","outdent_if_last_expected_child","println","seol_if_last_in_line","string","types","get_depths_flattened","get_depths_vec","get_output_for_element_index","replace_any_unknown_types","set_output","set_output_append","set_output_append_no_indent","set_output_for_element_close","set_output_for_element_open","get_current_parent_element_from_element_children_search","get_current_parent_element_from_parents","get_current_parent_ref_from_element_children_search","get_current_parent_ref_from_parents","get_indent","indent","outdent","vec_remove_head","vec_remove_tail","indent","indent_this","assignment","constant","fncall","functioncall_of_arg","functioncall_of_functiondef","if_expression","inbuiltfncall_from_inbuiltfndef","outdent","println","within_fndef_for_fncall_from_fndef","within_fndef_for_inbuiltfncall_from_inbuiltfndef","within_fndef_from_return_expression","main","APP_NAME","MyData","ToylangDebugger","borrow","borrow","borrow_mut","borrow_mut","build_ui","button0","button1","button2","button3","button4","button_reset","change_step_1_get_file","change_step_2_set_lines_of_chars","change_step_3_set_lines_of_tokens","change_step_4_parse_each_line","change_step_5_set_output","change_step_reset","change_step_stop","close","default","default","fmt","from","from","grid","history","history_max","history_max_update","history_trackbar","history_update","history_update","icon_128","icon_200","init","into","into","label0","label1","label2","label3","label4","label5","label6","label7","label8","label9","label_filepath","label_outputdir","mydata","rich_text_control_set_text","rich_text_input_init","richtext_ast_current","richtext_ast_previous","richtext_dynamic_ast","richtext_error_stack","richtext_input","richtext_loc","richtext_logs","richtext_lot","richtext_output","richtext_tree","run","show_tray_menu","step","step_is_resetting","step_is_resetting_update","step_is_running","step_is_running_update","step_max","step_max_update","step_update","textinput_filepath","textinput_outputdir","toylang_debugger_ui","tray","tray_item0","tray_item1","tray_menu","try_from","try_from","try_into","try_into","type_id","type_id","window","ToylangDebuggerUi","borrow","borrow_mut","default_handlers","deref","drop","fmt","from","inner","into","try_from","try_into","type_id","ERRORS","Errors","append_error","assign","assignment_cant_be_child_of_assignment","assignment_cant_be_child_of_constant","assignment_cant_be_child_of_fncal","assignment_cant_be_child_of_inbuiltfncall","assignment_cant_be_child_of_list","assignment_cant_be_child_of_parenthesis","borrow","borrow_mut","clone","clone_into","comment_cant_be_child_of_assignment","comment_cant_be_child_of_constant","comment_cant_be_child_of_fncall","comment_cant_be_child_of_inbuiltfncall","comment_cant_be_child_of_parenthesis","comment_single_line","constant_undefined","constantref_cant_be_child_of_parenthesis","constants_are_immutable","error_if_parent_is_invalid","error_if_parent_is_invalid_for_arg","error_if_parent_is_invalid_for_assignment","error_if_parent_is_invalid_for_bool","error_if_parent_is_invalid_for_commentsingleline","error_if_parent_is_invalid_for_constant","error_if_parent_is_invalid_for_constantref","error_if_parent_is_invalid_for_float","error_if_parent_is_invalid_for_fncall","error_if_parent_is_invalid_for_fndefwip","error_if_parent_is_invalid_for_if_expression","error_if_parent_is_invalid_for_inbuiltfncall","error_if_parent_is_invalid_for_int","error_if_parent_is_invalid_for_list","error_if_parent_is_invalid_for_loopfor","error_if_parent_is_invalid_for_parenthesis","error_if_parent_is_invalid_for_println","error_if_parent_is_invalid_for_string","float","float_cant_be_child_of_assignment","float_cant_be_child_of_parenthesis","fmt","fncall_cant_be_child_of_parenthesis","fncall_wrong_number_of_args","fndefwip_can_only_be_child_of_constant","from","funcdef_args","funcdef_argtypes_first","impossible_error","inbuiltfncall_cant_be_child_of_parenthesis","int","int_cant_be_child_of_assignment","int_cant_be_child_of_parenthesis","int_negative","int_out_of_bounds","into","list","list_cant_be_child","loop_for","loopfor_cant_be_child","loopfor_end_but_no_start","loopfor_malformed","parenthesis_cant_be_child_of_assignment","parenthesis_cant_be_child_of_constant","parenthesis_cant_be_child_of_root","println_cant_be_child_of_element","string","string_cant_be_child_of_assignment","string_cant_be_child_of_parenthesis","to_owned","try_from","try_into","type_id","DebugFileContents","File","FileContents","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","default","filecontents","filename","filepath","fmt","fmt","from","from","get","into","into","new","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","writefile_or_error","get_formatted_argname_argtype_pairs","integration_tests","doc_and_int_test","test_pass_assign_type_inf_divide_float","test_pass_assign_type_inf_divide_int","test_pass_assign_type_inf_minus_float","test_pass_assign_type_inf_modulo_float","test_pass_assign_type_inf_modulo_int","test_pass_assign_type_inf_multiply_float","test_pass_assign_type_inf_multiply_int","test_pass_assign_type_inf_plus_float","test_pass_assign_type_inf_plus_int","test_pass_assign_type_inf_plus_minus_int","test_pass_assignment_arithmetic","test_pass_assignment_float","test_pass_assignment_float_neg","test_pass_assignment_int","test_pass_assignment_string","test_pass_boolean_eq_equality_false","test_pass_boolean_eq_equality_true","test_pass_boolean_false","test_pass_boolean_gt_greater_than_false","test_pass_boolean_gt_greater_than_true","test_pass_boolean_gte_greater_than_equal_false","test_pass_boolean_gte_greater_than_equal_true","test_pass_boolean_gte_greater_than_equal_true2","test_pass_boolean_lt_less_than_false","test_pass_boolean_lt_less_than_true","test_pass_boolean_lte_less_than_equal_false","test_pass_boolean_lte_less_than_equal_true","test_pass_boolean_lte_less_than_equal_true2","test_pass_boolean_neq_non_equality_false","test_pass_boolean_neq_non_equality_true","test_pass_boolean_true","test_pass_comment_singleline","test_pass_comment_singleline_fn_no_longer_breaks","test_pass_comment_singleline_with_space","test_pass_constant","test_pass_empty_file","test_pass_float","test_pass_float_longer","test_pass_float_longer_neg","test_pass_float_max1","test_pass_float_max1_neg","test_pass_float_max2","test_pass_float_max2_neg","test_pass_float_neg","test_pass_float_space_before","test_pass_float_space_before_neg","test_pass_int","test_pass_int_longer","test_pass_int_longer_neg","test_pass_int_max","test_pass_int_max_neg","test_pass_int_neg","test_pass_int_space_before","test_pass_int_space_before_neg","test_pass_internal_function_calls_divide","test_pass_internal_function_calls_multiply","test_pass_internal_function_calls_negative","test_pass_internal_function_calls_plus","test_pass_list_append","test_pass_list_empty_float","test_pass_list_empty_int","test_pass_list_empty_string","test_pass_list_float","test_pass_list_float_assign","test_pass_list_int","test_pass_list_int2","test_pass_list_int_assign","test_pass_list_len","test_pass_list_map","test_pass_list_string","test_pass_list_string_assign","test_pass_single_scenario","test_pass_string","test_pass_string_escaped_quote","assignment","comment_single_line","concatenate_vec_strings","constant","current_line","current_token","float","function_call","function_definition_end","function_definition_start","functiontypesig_or_functionreference_end","functiontypesig_or_functionreference_start","get_args_from_dyn_fn","if_expression","inbuilt_function_call","int","is_float","is_integer","is_string","list_empty","list_end","list_start","loop_end","loop_for_range_start","println","string","strip_leading_whitespace","strip_trailing_whitespace","token_by_first_chars","types"],"q":["toylang","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","toylang::ast","","","","","","","","","","","","","","","","","","","","","","","","","","","toylang::ast::elements","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","toylang::ast::elements::append","","","","","","","","","","","","","","","","","","","","","","","","","toylang::ast::output","","","","","","","","","toylang::ast::parents","","","","","","","","","toylang::ast::parents::indent","","toylang::ast::parents::outdent","","","","","","","","","","","","toylang::compiler_runner","toylang::debug_window_derive","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","toylang::debug_window_derive::toylang_debugger_ui","","","","","","","","","","","","","toylang::errors","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","toylang::file","","","","","","","","","","","","","","","","","","","","","","","","","","","","","toylang::formatting","toylang::integration_tests","toylang::integration_tests::integration_tests","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","toylang::parse","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","Instructions for using toylang CLI","","","","","","","","A windows app to help with debugging development of Toylang","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Examples using the Toylang CLI","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","To make sure that everything is freed without issues, the …","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Toylang: “= a / 1.1 2.2”","Toylang: “= a / 1 2”","Toylang: “= a - 1.1 2.2”","Toylang: “= a % 1.1 2.2”","Toylang: “= a % 1 2”","Toylang: “= a * 1.1 2.2”","Toylang: “= a * 1 2”","Toylang: “= a + 1.1 2.2”","Toylang: “= a + 1 2”","Toylang: “= a - 1 2”","Toylang: “= a + 1 2”","Toylang: “= a 1.1”","Toylang: “= a -1.7976931348623157E+308”","Toylang: “= a 1”","Toylang: “= a &quot;string&quot;”","Toylang: “== 1 2”","Toylang: “== 1 1”","Toylang: “false”","Toylang: “&gt; 1 2”","Toylang: “&gt; 2 1”","Toylang: “&gt;= 1 2”","Toylang: “&gt;= 3 2”","Toylang: “&gt;= 2 2”","Toylang: “&lt; 2 1”","Toylang: “&lt; 1 2”","Toylang: “&lt;= 3 2”","Toylang: “&lt;= 2 3”","Toylang: “&lt;= 2 2”","Toylang: “!= 1 1”","Toylang: “!= 1 2”","Toylang: “true”","Toylang: “//comment”","Toylang: “//= a \\\\ i64 =&gt; 123”","Toylang: “    //    comment    “","Toylang: “= a 123\\\\r\\\\na”","Toylang: “”","Toylang: “1.1”","Toylang: “123.123”","Toylang: “-123.123”","Toylang: “1234567890.123456789”","Toylang: “-1234567890.123456789”","Toylang: “1.7976931348623157E+308”","Toylang: “-1.7976931348623157E+308”","Toylang: “-1.1”","Toylang: “    123.123    “","Toylang: “    -123.123    “","Toylang: “1”","Toylang: “123”","Toylang: “-123”","Toylang: “9223372036854775807”","Toylang: “-9223372036854775808”","Toylang: “-1”","Toylang: “    123    “","Toylang: “    -123    “","Toylang: “/ 9 3”","Toylang: “* 3 4”","Toylang: “- 1.1 2.2”","Toylang: “+ 1 2”","Toylang: “= list1 [ 1 ]\\\\r\\\\n= list2 [ 2 3 ]\\\\r\\\\n= appended …","Toylang: “f64”","Toylang: “i64”","Toylang: “String”","Toylang: “[ 1.1 2.2 3.3 4.4 5.5 ]”","Toylang: “= x [ 1.1 2.2 3.3 4.4 5.5 ]”","Toylang: “[ 1 ]”","Toylang: “[ 1 2 3 4 5 ]”","Toylang: “= x [ 1 2 3 4 5 ]”","Toylang: “= list [ 1 2 3 ]\\\\r\\\\n= len List.len list”","Toylang: “= list [ 1 ]\\\\r\\\\n= mapfn \\\\ i64 i64 i =&gt; * i …","Toylang: “[ &quot;1.1&quot; &quot;2.2&quot; &quot;3.3&quot; &quot;4.4&quot; &quot;5.5&quot; ]”","Toylang: “= x [ &quot;1.1&quot; &quot;2.2&quot; &quot;3.3&quot; &quot;4.4&quot; &quot;5.5&quot; ]”","helper function for tests","Toylang: “&quot;string&quot;”","Toylang: “&quot;&quot;”","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,1,3,6,7,8,1,3,6,7,8,1,1,1,0,1,1,1,1,1,1,1,0,1,1,0,0,1,1,3,6,7,8,1,0,3,6,7,8,1,0,3,6,7,8,1,0,1,1,1,1,1,1,0,1,1,0,1,0,1,1,1,1,1,1,3,6,7,8,1,3,6,7,8,1,3,6,7,8,1,0,17,17,17,17,0,17,0,17,17,17,0,0,0,0,0,0,17,17,0,17,0,17,17,17,17,17,19,0,0,19,19,19,19,19,0,0,0,0,0,0,19,19,0,0,19,19,19,19,19,19,19,19,19,19,19,0,19,19,0,0,19,0,19,19,0,19,19,0,0,0,0,0,0,0,20,19,20,19,19,19,20,19,20,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,19,0,0,19,20,19,20,19,20,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,21,24,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,24,21,24,24,21,21,24,24,24,21,24,21,21,21,0,24,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,0,21,24,24,24,24,24,24,24,24,21,21,0,21,21,21,21,24,21,24,21,24,21,21,0,22,22,22,22,22,22,22,22,22,22,22,22,0,0,0,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,0,0,0,28,27,28,27,27,27,27,27,27,27,28,27,28,27,27,28,27,27,27,28,27,28,27,28,27,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,1],[[]],0,0,0,0,0,0,[[1,2],2],0,0,[[],1],0,0,0,0,0,[[3,4],5],[[6,4],5],[[7,4],5],[[8,4],5],[[1,4],5],0,[[]],[[]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],[[]],[[2,2],9],0,0,[[1,9]],0,[1,10],[[9,11,[12,[9]]],[[10,[1,9]]]],[2,2],0,0,0,[[1,2],10],[13,9],[1,[[10,[[15,[14]]]]]],[1,10],[1,10],[1],[1],[[]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],16],[[],16],[[],16],[[],16],[[],16],0,[[]],[[]],[17,17],[[]],[18,9],[[],17],0,0,[[17,4],5],[[]],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[]],[[],17],0,0,0,0,[[]],[[],10],[[],10],[[],16],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[19,11],[12,11],[[17,9,9],[[12,[19]]]],[[17,9,9],[[12,[2]]]],[1,11],0,[[]],[[]],[[]],[[]],[19,19],[[]],[[20,4],5],[[19,4],5],[[]],[[]],[[17,9],[[12,[2]]]],[[1,18],[[18,[9]]]],[1,[[18,[9]]]],[[17,9],[[12,[19]]]],[[17,9],[[12,[2]]]],[[17,9],12],[[17,19],9],[[1,18],9],[[17,9],[[12,[2]]]],[[17,9],[[12,[19]]]],[[17,9],[[12,[2]]]],[[17,9],[[12,[2]]]],[[17,2],9],[[17,19,2],9],[17,9],[[17,9],9],[[17,9],9],[[17,[18,[2]]],9],[[17,2],9],[17],[1,9],[[17,2],19],[[]],[[]],[[17,2,2,2]],[[1,9,2]],[[]],[[],10],[[],10],[[],10],[[],10],[[],16],[[],16],[[4,2],5],[[20,4,2,2],5],[17,2],[17,2],[1,10],[[1,9],10],[[1,9,9],10],[[1,9],10],[[1,9,2,9,11],10],[[1,9,2],10],[1,10],[[1,9,2,9],10],[1,10],[1,10],[1,10],[[1,9,2],10],[1],[[1,9],10],[19,11],[1,10],[1,10],[[1,9],10],[1],[1,10],[1,10],[[1,9],10],[[1,2],10],[18,[[18,[2]]]],[17,[[18,[[18,[2]]]]]],[[17,2,11],9],[17],[1],[[17,13]],[[17,13]],[[17,2]],[[17,2]],[[17,2],12],[17],[[17,2],[[12,[2]]]],[17,2],[17,9],0,0,[18,[[18,[2]]]],[18,[[18,[2]]]],[17],[[17,2]],[1],[1],[[1,9]],[[1,9,2]],[[1,2,2]],[1],[[1,2]],[1],[1],[[1,9]],[[1,2]],[1],[[9,11,[12,[9]]]],0,0,0,[[]],[[]],[[]],[[]],[21,[[10,[22,23]]]],0,0,0,0,0,0,[21],[21],[21],[21],[21],[21],[21],[21],[[],24],[[],21],[[24,4],5],[[]],[[]],0,0,0,[[24,9]],0,[[24,18]],[21],0,0,[[22,9,11,[12,[9]]],1],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,[[21,25,13]],[21],0,0,0,0,0,0,0,0,0,0,[[9,11,[12,[9]]]],[21],0,0,[[24,11]],0,[[24,11]],0,[[24,2]],[[24,2]],0,0,0,0,0,0,0,[[],10],[[],10],[[],10],[[],10],[[],16],[[],16],0,0,[[]],[[]],0,[22],[22],[[22,4],5],[[]],0,[[]],[[],10],[[],10],[[],16],0,0,[[1,2,2,13],10],0,0,0,0,0,0,0,[[]],[[]],[26,26],[[]],0,0,0,0,0,0,0,0,0,[1,10],[1,10],[1,10],[1,10],[1,10],[1,10],[1,10],[1,10],[1,10],[1,10],[1,10],[1,10],[1,10],[1,10],[1,10],[1,10],[1,10],[1,10],0,0,0,[[26,4],5],0,0,0,[[]],0,0,0,0,0,0,0,0,0,[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[],10],[[],10],[[],16],0,0,0,[[]],[[]],[[]],[[]],[27,27],[[]],[[],27],0,0,0,[[28,4],5],[[27,4],5],[[]],[[]],[[27,13],[[10,[[15,[14]]]]]],[[]],[[]],[[],27],[[]],[[],10],[[],10],[[],10],[[],10],[[],16],[[],16],[[27,9,9,11],[[10,[[15,[14]]]]]],[[18,18],9],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[18,[13]]]],[[]],[[]],[1,10],[[1,18],10],[29,9],[[1,9],10],[1,10],[[1,29],10],[[1,9],10],[[1,9,2],10],[1,10],[1,10],[1,10],[1,10],[9,2],[1,10],[[1,9,2],10],[[1,9],10],[9,11],[9,11],[9,11],[1,10],[1,10],[1,10],[1,10],[1,10],[1,10],[[1,9],10],[9,9],[9,9],[[1,9,18],10],[[1,2],10]],"p":[[3,"Compiler"],[15,"usize"],[3,"DebugErrorStack"],[3,"Formatter"],[6,"Result"],[3,"DebugLogs"],[3,"DebugLinesOfChars"],[3,"DebugLinesOfTokens"],[3,"String"],[4,"Result"],[15,"bool"],[4,"Option"],[15,"str"],[8,"Error"],[3,"Box"],[3,"TypeId"],[3,"Ast"],[3,"Vec"],[4,"ElementInfo"],[3,"ElementsVec"],[3,"ToylangDebugger"],[3,"ToylangDebuggerUi"],[4,"NwgError"],[3,"MyData"],[3,"RichTextBox"],[3,"Errors"],[3,"File"],[3,"DebugFileContents"],[6,"Tokens"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
